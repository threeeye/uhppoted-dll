/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/uhppoted/uhppoted-dll/go */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"

#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include <string.h>

#include "dispatch.h"

typedef struct udevice {
	uint32_t    id;
	const char *address;
} udevice;

typedef struct udevices {
	uint32_t  N;        // number of devicess
	udevice  *devices;  // array non-local devices
} udevices;

typedef struct UHPPOTE {
	const char *bind;
	const char *broadcast;
	const char *listen;
	int         timeout;  // milliseconds
	udevices   *devices;  // (optional) list of non-local devices
	bool        debug;
} UHPPOTE;

typedef struct Device {
    uint32_t ID;
	char *address;   // char[16]
	char *subnet;    // char[16]
	char *gateway;   // char[16]
	char *MAC;       // char[18]
	char *version;   // char[6]
	char *date;      // char[11]
} Device;

typedef struct Event {
	char    *timestamp; // char[20]
    uint32_t index;
	uint8_t  eventType;
	uint8_t  granted;
	uint8_t  door;
	uint8_t  direction;
	uint32_t card;
	uint8_t  reason;
} Event;

typedef struct Status {
    uint32_t ID;
 	char    *sysdatetime;      // char[20]
 	uint8_t *doors;            // uint_8[4]
 	uint8_t *buttons;          // uint_8[4]
 	uint8_t  relays;
 	uint8_t  inputs;
 	uint8_t  syserror;
 	uint8_t  info;
	uint32_t seqno;

	char     *eventTimestamp;  // char[20]
    uint32_t  eventIndex;
	uint8_t   eventType;
	uint8_t   eventGranted;
	uint8_t   eventDoor;
	uint8_t   eventDirection;
	uint32_t  eventCard;
	uint8_t   eventReason;
} Status;

typedef struct DoorControl {
    uint8_t mode;
    uint8_t delay;
} DoorControl;

typedef struct Card {
    uint32_t card_number;
    char    *from;  // char[11]
    char    *to;    // char[11]
	uint8_t *doors; // uint_8[4]
    uint32_t PIN;
} Card;

typedef struct TimeProfile {
    uint8_t ID;
    uint8_t linked;
    char *from;            // char[11]
    char *to;              // char[11]
    uint8_t monday;
    uint8_t tuesday;
    uint8_t wednesday;
    uint8_t thursday;
    uint8_t friday;
    uint8_t saturday;
    uint8_t sunday;
    char * segment1start;  // char[6]
    char * segment1end;    // char[6]
    char * segment2start;  // char[6]
    char * segment2end;    // char[6]
    char * segment3start;  // char[6]
    char * segment3end;    // char[6]
} TimeProfile;

typedef struct Task {
	uint8_t task;
	uint8_t door;
	const char *from;
	const char *to;
    uint8_t monday;
    uint8_t tuesday;
    uint8_t wednesday;
    uint8_t thursday;
    uint8_t friday;
    uint8_t saturday;
    uint8_t sunday;
	const char *at;
	uint8_t cards;
} Task;


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern int GetDevices(struct UHPPOTE* u, int* N, unsigned int* list, char* errmsg);
extern int GetDevice(struct UHPPOTE* u, struct Device* device, GoUint32 deviceID, char* errmsg);
extern int SetAddress(struct UHPPOTE* u, GoUint32 deviceID, char* addr, char* subnet, char* gateway, char* errmsg);
extern int GetStatus(struct UHPPOTE* u, struct Status* status, GoUint32 deviceID, char* errmsg);
extern int GetTime(struct UHPPOTE* u, char* datetime, GoUint32 deviceID, char* errmsg);
extern int SetTime(struct UHPPOTE* u, GoUint32 deviceID, char* datetime, char* errmsg);
extern int GetListener(struct UHPPOTE* u, char* address, GoUint32 deviceID, char* errmsg);
extern int SetListener(struct UHPPOTE* u, GoUint32 deviceID, char* listener, char* errmsg);
extern int GetDoorControl(struct UHPPOTE* u, struct DoorControl* control, GoUint32 deviceID, GoUint8 door, char* errmsg);
extern int SetDoorControl(struct UHPPOTE* u, GoUint32 deviceID, GoUint8 door, GoUint8 mode, GoUint8 delay, char* errmsg);
extern int OpenDoor(struct UHPPOTE* u, GoUint32 deviceID, GoUint8 door, char* errmsg);
extern int GetCards(struct UHPPOTE* u, int* N, GoUint32 deviceID, char* errmsg);
extern int GetCard(struct UHPPOTE* u, struct Card* card, GoUint32 deviceID, GoUint32 cardNumber, char* errmsg);
extern int GetCardByIndex(struct UHPPOTE* u, struct Card* card, GoUint32 deviceID, GoUint32 index, char* errmsg);
extern int PutCard(struct UHPPOTE* u, GoUint32 deviceID, GoUint32 cardNumber, char* from, char* to, GoUint8* doors, GoUint32 PIN, char* errmsg);
extern int DeleteCard(struct UHPPOTE* u, GoUint32 deviceID, GoUint32 cardNumber, char* errmsg);
extern int DeleteCards(struct UHPPOTE* u, GoUint32 deviceID, char* errmsg);
extern int GetEventIndex(struct UHPPOTE* u, GoUint32* index, GoUint32 deviceID, char* errmsg);
extern int SetEventIndex(struct UHPPOTE* u, GoUint32 deviceID, GoUint32 index, char* errmsg);
extern int GetEvent(struct UHPPOTE* u, struct Event* event, GoUint32 deviceID, GoUint32 index, char* errmsg);
extern int RecordSpecialEvents(struct UHPPOTE* u, GoUint32 deviceID, GoUint8 enabled, char* errmsg);
extern int GetTimeProfile(struct UHPPOTE* u, struct TimeProfile* profile, GoUint32 deviceID, GoUint8 profileID, char* errmsg);
extern int SetTimeProfile(struct UHPPOTE* u, GoUint32 deviceID, struct TimeProfile* profile, char* errmsg);
extern int ClearTimeProfiles(struct UHPPOTE* u, GoUint32 deviceID, char* errmsg);
extern int AddTask(struct UHPPOTE* u, GoUint32 deviceID, struct Task* task, char* errmsg);
extern int RefreshTaskList(struct UHPPOTE* u, GoUint32 deviceID, char* errmsg);
extern int ClearTaskList(struct UHPPOTE* u, GoUint32 deviceID, char* errmsg);
extern int SetPCControl(struct UHPPOTE* u, GoUint32 controller, GoUint8 enabled, char* errmsg);
extern int SetInterlock(struct UHPPOTE* u, GoUint32 controller, GoUint8 interlock, char* errmsg);
extern int ActivateKeypads(struct UHPPOTE* u, GoUint32 controller, GoUint8 reader1, GoUint8 reader2, GoUint8 reader3, GoUint8 reader4, char* errmsg);

// Sets the supervisor passcodes for a door managed by the controller.
//
// Valid passcodes are in the range [1..999999] or 0 (no code) - invalid passcodes will be replaced by
// a 0 (no code).
//
extern int SetDoorPasscodes(struct UHPPOTE* u, GoUint32 controller, GoUint8 door, GoUint32 passcode1, GoUint32 passcode2, GoUint32 passcode3, GoUint32 passcode4, char* errmsg);

// Resets a controller to the manufacturer default configuration.
//
extern int RestoreDefaultParameters(struct UHPPOTE* u, GoUint32 controller, char* errmsg);

// Listens for events and invokes a callback function.
//
extern GoInt Listen(struct UHPPOTE* u, onevent f, GoUint8* running, GoUint8* stop, onerror g);

#ifdef __cplusplus
}
#endif
